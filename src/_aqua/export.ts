/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.6.3-282
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

// Functions
 

export function findSubscribers(
    topic: string,
    config?: {ttl?: number}
): Promise<{ peer_id: string; relay_id: string[]; service_id: string[]; set_by: string; timestamp_created: number; value: string; weight: number; }[]>;

export function findSubscribers(
    peer: FluencePeer,
    topic: string,
    config?: {ttl?: number}
): Promise<{ peer_id: string; relay_id: string[]; service_id: string[]; set_by: string; timestamp_created: number; value: string; weight: number; }[]>;

export function findSubscribers(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                       )
                       (new $res
                        (xor
                         (seq
                          (seq
                           (seq
                            (call -relay- ("op" "string_to_b58") [topic] k)
                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                           )
                           (par
                            (fold nodes n
                             (par
                              (seq
                               (xor
                                (xor
                                 (seq
                                  (call n ("peer" "timestamp_sec") [] t)
                                  (call n ("aqua-dht" "get_values") [topic t] $res)
                                 )
                                 (null)
                                )
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                )
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (next n)
                             )
                            )
                            (null)
                           )
                          )
                          (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [v.$.result!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "findSubscribers",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "topic",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type InitTopicAndSubscribeBlockingResult = { error: string; success: boolean; }
export function initTopicAndSubscribeBlocking(
    topic: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    progress: (arg0: string, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<InitTopicAndSubscribeBlockingResult>;

export function initTopicAndSubscribeBlocking(
    peer: FluencePeer,
    topic: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    progress: (arg0: string, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<InitTopicAndSubscribeBlockingResult>;

export function initTopicAndSubscribeBlocking(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                          )
                          (call %init_peer_id% ("getDataSrv" "value") [] value)
                         )
                         (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                       )
                       (new $results
                        (seq
                         (xor
                          (seq
                           (seq
                            (call -relay- ("op" "string_to_b58") [topic] k)
                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                           )
                           (par
                            (fold nodes n
                             (par
                              (seq
                               (seq
                                (xor
                                 (xor
                                  (seq
                                   (seq
                                    (seq
                                     (call n ("peer" "timestamp_sec") [] t)
                                     (call n ("aqua-dht" "register_key") [topic t false 0])
                                    )
                                    (call n ("aqua-dht" "put_value") [topic value t relay_id service_id 0] result)
                                   )
                                   (xor
                                    (match result.$.success! true
                                     (xor
                                      (seq
                                       (seq
                                        (ap result $results)
                                        (call -relay- ("op" "noop") [])
                                       )
                                       (xor
                                        (seq
                                         (call %init_peer_id% ("callbackSrv" "progress") [n])
                                         (call -relay- ("op" "noop") [])
                                        )
                                        (seq
                                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                         (call -relay- ("op" "noop") [])
                                        )
                                       )
                                      )
                                      (seq
                                       (seq
                                        (call -relay- ("op" "noop") [])
                                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                       )
                                       (call -relay- ("op" "noop") [])
                                      )
                                     )
                                    )
                                    (null)
                                   )
                                  )
                                  (null)
                                 )
                                 (seq
                                  (call -relay- ("op" "noop") [])
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                 )
                                )
                                (call -relay- ("op" "noop") [])
                               )
                               (call %init_peer_id% ("op" "noop") [])
                              )
                              (next n)
                             )
                            )
                            (null)
                           )
                          )
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                         )
                         (call %init_peer_id% ("op" "identity") [$results.$.[0]!] results-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "initTopicAndSubscribeBlocking",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "topic",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "value",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "relay_id",
            "argType" : {
                "tag" : "optional"
            }
        },
        {
            "name" : "service_id",
            "argType" : {
                "tag" : "optional"
            }
        },
        {
            "name" : "progress",
            "argType" : {
                "tag" : "callback",
                "callback" : {
                    "argDefs" : [
                        {
                            "name" : "arg0",
                            "argType" : {
                                "tag" : "primitive"
                            }
                        }
                    ],
                    "returnType" : {
                        "tag" : "void"
                    }
                }
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function subscribe(
    topic: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<void>;

export function subscribe(
    peer: FluencePeer,
    topic: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<void>;

export function subscribe(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                         )
                         (call %init_peer_id% ("getDataSrv" "value") [] value)
                        )
                        (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                       )
                       (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                      )
                      (xor
                       (seq
                        (seq
                         (call -relay- ("op" "string_to_b58") [topic] k)
                         (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                        )
                        (par
                         (fold nodes n
                          (par
                           (xor
                            (xor
                             (seq
                              (call n ("peer" "timestamp_sec") [] t)
                              (call n ("aqua-dht" "put_value") [topic value t relay_id service_id 0])
                             )
                             (null)
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                           (next n)
                          )
                         )
                         (null)
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "subscribe",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "topic",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "value",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "relay_id",
            "argType" : {
                "tag" : "optional"
            }
        },
        {
            "name" : "service_id",
            "argType" : {
                "tag" : "optional"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function executeOnSubscribers(
    topic: string,
    call: (arg0: { peer_id: string; relay_id: string[]; service_id: string[]; set_by: string; timestamp_created: number; value: string; weight: number; }, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function executeOnSubscribers(
    peer: FluencePeer,
    topic: string,
    call: (arg0: { peer_id: string; relay_id: string[]; service_id: string[]; set_by: string; timestamp_created: number; value: string; weight: number; }, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function executeOnSubscribers(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "topic") [] topic)
                       )
                       (new $res
                        (xor
                         (seq
                          (seq
                           (seq
                            (call -relay- ("op" "string_to_b58") [topic] k)
                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                           )
                           (par
                            (fold nodes n
                             (par
                              (seq
                               (xor
                                (xor
                                 (seq
                                  (call n ("peer" "timestamp_sec") [] t)
                                  (call n ("aqua-dht" "get_values") [topic t] $res)
                                 )
                                 (null)
                                )
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                )
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (next n)
                             )
                            )
                            (null)
                           )
                          )
                          (call -relay- ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                      )
                      (par
                       (fold v.$.result! r
                        (par
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (fold r.$.relay_id! -via-peer-
                            (seq
                             (call -via-peer- ("op" "noop") [])
                             (next -via-peer-)
                            )
                           )
                          )
                          (xor
                           (seq
                            (seq
                             (fold r.$.relay_id! -via-peer-
                              (seq
                               (call -via-peer- ("op" "noop") [])
                               (next -via-peer-)
                              )
                             )
                             (call -relay- ("op" "noop") [])
                            )
                            (xor
                             (call %init_peer_id% ("callbackSrv" "call") [r])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                            )
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                          )
                         )
                         (next r)
                        )
                       )
                       (null)
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "executeOnSubscribers",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "topic",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "call",
            "argType" : {
                "tag" : "callback",
                "callback" : {
                    "argDefs" : [
                        {
                            "name" : "arg0",
                            "argType" : {
                                "tag" : "primitive"
                            }
                        }
                    ],
                    "returnType" : {
                        "tag" : "void"
                    }
                }
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
